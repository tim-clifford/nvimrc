--- .vimrc	2021-01-18 03:41:25.301973758 +0000
+++ .vimrc-nvim	2021-01-18 03:43:53.561606279 +0000
@@ -1,12 +1,11 @@
 " Plugins {{{
 set nocompatible              " be iMproved, required
-set encoding=utf-8
 filetype off                  " required
 " set the runtime path to include Vundle and initialize
-set rtp+=~/.vim/bundle/Vundle.vim
-call vundle#begin()
+set rtp+=~/.config/nvim/bundle/Vundle.vim
+"call vundle#begin()
 " alternatively, pass a path where Vundle should install plugins
-"call vundle#begin('~/some/path/here')
+call vundle#begin('~/.config/nvim/bundle')
 
 " let Vundle manage Vundle, required
 Plugin 'VundleVim/Vundle.vim'
@@ -17,20 +16,16 @@
 Plugin 'sirver/ultisnips'
 Plugin 'honza/vim-snippets'
 Plugin 'scrooloose/nerdcommenter'
-Plugin 'lervag/vimtex'
 Plugin 'dracula/vim', { 'name': 'dracula' }
-Plugin 'tim-clifford/jupyter-vim'
-Plugin 'tim-clifford/jupytext.vim'
 Plugin 'vim-airline/vim-airline'
-Plugin 'lambdalisue/battery.vim'
-Plugin 'puremourning/vimspector'
 Plugin 'junegunn/fzf'
 Plugin 'junegunn/fzf.vim'
 Plugin 'dag/vim-fish'
-"Plugin 'pandysong/ghost-text.vim', { 'do': ':GhostInstall' }
+Plugin 'raghur/vim-ghost', { 'do': ':GhostInstall' }
 Plugin 'ap/vim-css-color'
 Plugin 'skywind3000/asyncrun.vim'
 Plugin 'powerman/vim-plugin-AnsiEsc'
+Plugin 'glacambre/firenvim'
 
 " All of your Plugins must be added before the following line
 call vundle#end()            " required
@@ -74,9 +69,6 @@
 set undodir=~/.vim/undodir
 set undofile
 set shortmess+=F
-
-command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
-		\ | wincmd p | diffthis
 " }}}
 " Visual Selection {{{
 " public domain code by stack overflow user FocusedWolf
@@ -229,135 +221,6 @@
 "autocmd StdinReadPre * let s:std_in=1
 "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
 " }}}
-" TermPDF {{{
-let g:current_page = 0
-let g:total_pages = 0
-let g:termpdf_lastcalled = 0
-function TermPDF(file) abort
-	" Implement some basic throttling
-	let time = str2float(reltimestr(reltime())) * 1000.0
-	if time - g:termpdf_lastcalled > 1000
-		call system('kitty @ kitten termpdf.py ' . a:file)
-		" Remember the last opened page but don't fail when the number of
-		" pages has changed
-		let g:total_pages = str2nr(system("pdfinfo "
-					\ . a:file . " | grep Pages | sed 's/[^0-9]*//'"))
-		if g:current_page == 0
-			let g:current_page = 1
-		elseif g:current_page <= g:total_pages
-			call system('sleep 0.2 && tpdfc goto ' . g:current_page)
-		else
-			let g:current_page = 1
-		endif
-		let g:termpdf_lastcalled = time
-	endif
-endfunction
-
-function TermPDFNext() abort
-	if g:current_page < g:total_pages
-		call system('tpdfc forward 1')
-		let g:current_page += 1
-	endif
-endfunction
-
-function TermPDFPrev() abort
-	if g:current_page > 1
-		call system('tpdfc back 1')
-		let g:current_page -= 1
-	endif
-endfunction
-
-function TermPDFEnd() abort
-	call system('tpdfc last')
-endfunction
-
-function TermPDFClose() abort
-	call system('kitty @ close-window --match title:termpdf')
-endfunction
-function TermPDFAutoUpdateIfChanged(timer)
-	if filereadable(getcwd().'/.jupyter-pdf-changed')
-		call TermPDF(getcwd().'/jupyter_plots.pdf')
-		call system('rm '.getcwd().'/.jupyter-pdf-changed')
-		if g:current_page < g:total_pages
-			call TermPDFEnd()
-		endif
-	endif
-endfunction
-let g:timerid = -1
-function TermPDFAutoUpdateStart()
-	if g:timerid == -1
-		let g:timerid = timer_start(1000,
-					\ 'TermPDFAutoUpdateIfChanged', {'repeat': -1})
-	endif
-endfunction
-function TermPDFAutoUpdateStop()
-	if g:timerid != -1
-		timer_stop(g:timerid)
-	endif
-endfunction
-" }}}
-" Vimtex {{{
-let g:tex_flavor = 'latex'
-let g:vimtex_view_automatic = 0
-function VimtexCallback()
-	call TermPDF(escape(b:vimtex.out()," "))
-endfunction
-function VimtexExit()
-	call TermPDFClose()
-	:VimtexClean
-	" Remove extra auxiliary files that I don't particularly care about
-	call system("rm *.run.xml *.bbl *.synctex.gz")
-endfunction
-augroup vimtex
-	autocmd VimLeave *.tex call VimtexExit()
-	autocmd User VimtexEventCompileSuccess call VimtexCallback()
-	autocmd InsertLeave *.tex :w
-	" <C-PgUp> and <C-PgDn>
-	autocmd FileType tex,markdown nnoremap [5;5~ :call TermPDFPrev()<CR>
-	autocmd FileType tex,markdown nnoremap [6;5~ :call TermPDFNext()<CR>
-	autocmd FileType markdown call TermPDFAutoUpdateStart()
-augroup END
-" }}}
-" Jupyter {{{
-function JupyterStart()
-	call system('kitty @ kitten jupyter.py '.getcwd())
-	:JupyterConnect
-endfunction
-function JupyterExit()
-	call TermPDFClose()
-	call system("pkill -9 jupyter
-				\ && kitty @ close-window --match title:vimjupyter")
-endfunction
-function JupyterCompile()
-	silent execute "w"
-	call system('pandoc '.expand('%:t:r').'.md '
-	          \ '-o jupyter_notebook.pdf -V geometry:margin=1in')
-	call TermPDF(getcwd().'/jupyter_notebook.pdf')
-endfunction
-"function JupyterRunAllIntoMarkdown()
-	""call system('pkill -9 jupyter')
-	""call JupyterStart()
-	"normal gg
-	"let flags = "c"
-	"while search("```python", flags) != 0
-		"call jupyter#SendCell()
-		"call search("```")
-		"call system("sleep 0.5")
-		"call append(line('.'),matchstr(readfile('.jupyter-out'),"OUT["))
-		"let flags = ""
-	"endwhile
-"endfunction
-"let g:jupyter_monitor_console = 1
-let g:jupyter_mapkeys = 0
-let b:jupyter_kernel_type = 'python'
-let g:jupyter_cell_separators = ['```py','```']
-let g:markdown_fenced_languages = ['python']
-augroup jupyter
-	autocmd VimLeave *.ipynb call JupyterExit()
-	autocmd BufEnter *.ipynb call jupyter#load#MakeStandardCommands()
-	autocmd BufEnter *.ipynb set filetype=markdown.python
-augroup END
-" }}}
 " YouCompleteMe {{{
 au VimEnter * let g:ycm_semantic_triggers.tex=g:vimtex#re#youcompleteme
 let g:ycm_filetype_blacklist={
